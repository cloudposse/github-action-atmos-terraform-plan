name: 'GitHub Action Atmos Terraform Plan'
description: 'GitHub Action Atmos Terraform Plan'
author: hello@cloudposse.com
branding:
  icon: 'server'
  color: 'white'
inputs:
  component:
    description: "The name of the component to plan."
    required: true
  stack:
    description: "The stack name for the given component."
    required: true
  sha:
    description: "Commit SHA to plan. Default: github.sha"
    required: true
    default: "${{ github.event.pull_request.head.sha }}"
  drift-detection-mode-enabled:
    description: "Indicate whether this action is used in drift detection workflow."
    required: true
    default: 'false'
  atmos-version:
    description: The version of atmos to install
    required: false
    default: ">= 1.63.0"
  atmos-config-path:
    description: The path to the atmos.yaml file
    required: true
  infracost-api-key:
    description: "Infracost API key"
    required: false
  metadata-retention-days:
    description: "Infracost API key"
    required: false
    default: "1"
  branding-logo-image:
    description: "Branding logo image url"
    required: false
    default: "https://cloudposse.com/logo-300x69.svg"
  branding-logo-url:
    description: "Branding logo url"
    required: false
    default: "https://cloudposse.com/"
  debug:
    description: "Enable action debug mode. Default: 'false'"
    default: 'false'
    required: false
  token:
    description:
      Used to pull node distributions for Atmos from Cloud Posse's GitHub repository. Since there's a default, this is typically
      not supplied by the user. When running this action on github.com, the default value is sufficient. When running on
      GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
    default: ${{ github.server_url == 'https://github.com' && github.token || '' }}
outputs:
  summary:
    description: "Summary"
    value: "${{ steps.summary.outputs.result }}"

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set atmos cli config path vars
      shell: bash
      run: |-
        echo "ATMOS_CLI_CONFIG_PATH=$(realpath ${{ inputs.atmos-config-path }})" >> $GITHUB_ENV

    - name: Install Atmos
      uses: cloudposse/github-action-setup-atmos@v1
      with:
        atmos-version: ${{ inputs.atmos-version }}
        token: ${{ inputs.token }}
        install-wrapper: false

    - name: config
      shell: bash
      id: config
      run: |-
        echo "terraform-version=$(atmos describe config -f json | jq -r '.integrations.github.gitops["terraform-version"]')" >> $GITHUB_OUTPUT
        echo "enable-infracost=$(atmos describe config -f json | jq -r '.integrations.github.gitops["infracost-enabled"]')" >> $GITHUB_OUTPUT        
        echo "aws-region=$(atmos describe config -f json | jq -r '.integrations.github.gitops.storage.region')" >> $GITHUB_OUTPUT
        echo "terraform-state-role=$(atmos describe config -f json | jq -r '.integrations.github.gitops.storage.role')" >> $GITHUB_OUTPUT
        echo "terraform-state-table=$(atmos describe config -f json | jq -r '.integrations.github.gitops.storage.table')" >> $GITHUB_OUTPUT
        echo "terraform-state-bucket=$(atmos describe config -f json | jq -r '.integrations.github.gitops.storage.bucket')" >> $GITHUB_OUTPUT        
        echo "terraform-plan-role=$(atmos describe config -f json | jq -r '.integrations.github.gitops.role.plan')" >> $GITHUB_OUTPUT

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ steps.config.outputs.terraform-version }}
        terraform_wrapper: false

    - name: Filter Atmos Settings Value
      uses: cloudposse/github-action-atmos-get-setting@v1
      id: atmos-github-actions-enabled
      with:
        component: ${{ inputs.component }}
        stack: ${{ inputs.stack }}
        settings-path: settings.github.actions_enabled

    - name: Find component path
      if: ${{ steps.atmos-github-actions-enabled.outputs.value == 'true' }}
      uses: cloudposse/github-action-atmos-get-setting@v1
      id: component-path
      with:
        component: ${{ inputs.component }}
        stack: ${{ inputs.stack }}
        settings-path: component_info.component_path

    - name: Find atmos cli base path
      if: ${{ steps.atmos-github-actions-enabled.outputs.value == 'true' }}
      uses: cloudposse/github-action-atmos-get-setting@v1
      id: base-path
      with:
        component: ${{ inputs.component }}
        stack: ${{ inputs.stack }}
        settings-path: atmos_cli_config.base_path

    - name: Set atmos cli base path vars
      if: ${{ steps.atmos-github-actions-enabled.outputs.value == 'true' }}
      shell: bash
      run: |-
        # Set ATMOS_BASE_PATH allow `cloudposse/utils` provider to read atmos config from the correct path 
        ATMOS_BASE_PATH="${{ steps.base-path.outputs.value }}"
        echo "ATMOS_BASE_PATH=$(realpath ${ATMOS_BASE_PATH:-./})" >> $GITHUB_ENV

    - name: Install tfcmt
      if: ${{ steps.atmos-github-actions-enabled.outputs.value == 'true' }}
      uses: jaxxstorm/action-install-gh-release@v1.10.0
      with:
        repo: suzuki-shunsuke/tfcmt
        tag: v4.6.0        

    - name: Prepare Artifacts Directory
      if: ${{ steps.atmos-github-actions-enabled.outputs.value == 'true' }}
      shell: bash
      run: |
        mkdir -p metadata    

    - name: Define Job Variables
      if: ${{ steps.atmos-github-actions-enabled.outputs.value == 'true' }}
      id: vars
      shell: bash
      run: |
        STACK_NAME=$(echo "${{ inputs.stack }}" | sed 's#/#_#g')
        COMPONENT_PATH=${{ steps.component-path.outputs.value }}
        COMPONENT_NAME=$(echo "${{ inputs.component }}" | sed 's#/#_#g')
        COMPONENT_SLUG="$STACK_NAME-$COMPONENT_NAME"
        PLAN_FILE="$( realpath ${COMPONENT_PATH})/$COMPONENT_SLUG-${{ inputs.sha }}.planfile"
        LOCK_FILE="$( realpath ${COMPONENT_PATH})/.terraform.lock.hcl"

        ISSUE_SUMMARY_FILE="$GITHUB_WORKSPACE/metadata/issue-description-${COMPONENT_SLUG}.md"
        STEP_SUMMARY_FILE="$GITHUB_WORKSPACE/metadata/step-summary-${COMPONENT_SLUG}.md"
        SUMMARY_FILE="$GITHUB_WORKSPACE/metadata/summary-${COMPONENT_SLUG}.md"
        
        echo "stack_name=${STACK_NAME}" >> $GITHUB_OUTPUT
        echo "component_name=${COMPONENT_NAME}" >> $GITHUB_OUTPUT
        echo "component_slug=${COMPONENT_SLUG}" >> $GITHUB_OUTPUT
        echo "component_path=${COMPONENT_PATH}" >> $GITHUB_OUTPUT
        echo "plan_file=${PLAN_FILE}" >> $GITHUB_OUTPUT
        echo "lock_file=${LOCK_FILE}" >> $GITHUB_OUTPUT

        echo "summary_file=${SUMMARY_FILE}" >> $GITHUB_OUTPUT
        echo "step_summary_file=${STEP_SUMMARY_FILE}" >> $GITHUB_OUTPUT
        echo "issue_file=${ISSUE_SUMMARY_FILE}" >> $GITHUB_OUTPUT

    - name: Configure Plan AWS Credentials
      if: ${{ steps.atmos-github-actions-enabled.outputs.value == 'true' }}
      uses: aws-actions/configure-aws-credentials@v4.0.1
      with:
        aws-region: ${{ steps.config.outputs.aws-region }}
        role-to-assume: ${{ steps.config.outputs.terraform-plan-role }}
        role-session-name: "atmos-terraform-plan-gitops"
        mask-aws-account-id: "no"

    - name: Atmos Terraform Plan
      if: ${{ steps.atmos-github-actions-enabled.outputs.value == 'true' }}
      id: atmos-plan
      shell: bash
      run: |
        set +e
        
        TERRAFORM_OUTPUT_FILE="./terraform-${GITHUB_RUN_ID}-output.txt"

        atmos terraform state ${{ inputs.component }} -s ${{ inputs.stack }} | grep lineage

        tfcmt \
        --config ${{ github.action_path }}/config/summary.yaml \
        -owner "${{ github.repository_owner }}" \
        -repo "${{ github.event.repository.name }}" \
        -var "target:${{ steps.vars.outputs.component_slug }}" \
        -var "component:${{ inputs.component }}" \
        -var "componentPath:${{ steps.vars.outputs.component_path }}" \
        -var "commitSHA:${{ inputs.sha }}" \
        -var "stack:${{ inputs.stack }}" \
        -var "job:${{ github.job }}" \
        -var "logoImage:${{ inputs.branding-logo-image }}" \
        -var "logoUrl:${{ inputs.branding-logo-url }}" \
        -var "infracost_enabled:${{ steps.config.outputs.enable-infracost }}" \
        -var "driftModeEnabled:${{ inputs.drift-detection-mode-enabled }}" \
        --output ${{ steps.vars.outputs.summary_file }} \
        --log-level $([[ "${{ inputs.debug }}" == "true" ]] && echo "DEBUG" || echo "INFO") \
        plan -- \
          atmos terraform plan ${{ inputs.component }} \
          --stack ${{ inputs.stack }} \
          -out="${{ steps.vars.outputs.plan_file }}" \
          -lock=false \
          -input=false \
          -no-color \
        &> ${TERRAFORM_OUTPUT_FILE}

        TERRAFORM_RESULT=$?

        set -e
        
        if [[ "${{ inputs.drift-detection-mode-enabled }}" == "true" ]]; then
          # Split summary to 2 files - issue and step summary files
          # Remove \0 at the end of the grep output
          grep -Pzo '(.|\n)*(?=_______________ISSUE-MARKDOWN_______________\n)' ${{ steps.vars.outputs.summary_file }} | grep -Pav  "\x00" > ${{ steps.vars.outputs.step_summary_file }}
          grep -Pzo '(?<=_______________ISSUE-MARKDOWN_______________\n)(.|\n)*' ${{ steps.vars.outputs.summary_file }} | grep -Pav  "\x00" > ${{ steps.vars.outputs.issue_file }}
          rm -f ${{ steps.vars.outputs.summary_file }}
        else
          mv ${{ steps.vars.outputs.summary_file }} ${{ steps.vars.outputs.step_summary_file }}
        fi
        
        cat "${TERRAFORM_OUTPUT_FILE}"
        
        HAS_CHANGES=false
        HAS_NO_CHANGES=false
        HAS_ERROR=false
        if [[ "${TERRAFORM_RESULT}" == "0" ]]; then
          if grep -q '^No changes. Your infrastructure matches the configuration.' ${TERRAFORM_OUTPUT_FILE} ; then
            echo "No changes found"
            HAS_NO_CHANGES=true
          else
            HAS_CHANGES=true
            echo "Found changes"
          fi
        else
          HAS_ERROR=true
          echo "Error appears"
        fi

        # One of changes, no-changes, error should be true
        echo "changes=${HAS_CHANGES}" >> $GITHUB_OUTPUT
        echo "no-changes=${HAS_NO_CHANGES}" >> $GITHUB_OUTPUT
        echo "error=${HAS_ERROR}" >> $GITHUB_OUTPUT

        echo "result=${TERRAFORM_RESULT}" >> $GITHUB_OUTPUT
        
        rm -f ${TERRAFORM_OUTPUT_FILE}

    - name: Configure State AWS Credentials
      if: ${{ steps.atmos-plan.outputs.error == 'false' }}
      uses: aws-actions/configure-aws-credentials@v4.0.1
      with:
        aws-region: ${{ steps.config.outputs.aws-region }}
        role-to-assume: ${{ steps.config.outputs.terraform-state-role }}
        role-session-name: "atmos-terraform-state-gitops"
        mask-aws-account-id: "no"

    - name: Store New Plan
      if: ${{ steps.atmos-plan.outputs.error == 'false' }}
      uses: cloudposse/github-action-terraform-plan-storage@v1
      id: store-plan
      with:
        action: storePlan
        commitSHA: ${{ inputs.sha }}
        planPath: ${{ steps.vars.outputs.plan_file }}
        component: ${{ inputs.component }}
        stack: ${{ inputs.stack }}
        tableName: ${{ steps.config.outputs.terraform-state-table }}
        bucketName: ${{ steps.config.outputs.terraform-state-bucket }}

    - name: Store Lockfile for New Plan
      if: ${{ steps.atmos-plan.outputs.error == 'false' }}
      uses: cloudposse/github-action-terraform-plan-storage@v1
      with:
        action: storePlan
        commitSHA: ${{ inputs.sha }}
        planPath: ${{ steps.vars.outputs.lock_file }}
        component: ${{ inputs.component }}
        stack: ${{ inputs.stack }}-lockfile
        tableName: ${{ steps.config.outputs.terraform-state-table }}
        bucketName: ${{ steps.config.outputs.terraform-state-bucket }}

    - name: Setup Infracost
      if: ${{ steps.config.outputs.enable-infracost == 'true' && steps.atmos-plan.outputs.changes == 'true' }}
      uses: infracost/actions/setup@v2
      with:
        api-key: ${{ inputs.infracost-api-key }}

    - name: Convert PLANFILE to JSON
      if: ${{ steps.config.outputs.enable-infracost == 'true' && steps.atmos-plan.outputs.changes == 'true' }}
      shell: bash
      working-directory: ./${{ steps.vars.outputs.component_path }}
      run: |
        terraform show -json "${{ steps.vars.outputs.plan_file }}" > "${{ steps.vars.outputs.plan_file }}.json"

    - name: Generate Infracost Diff
      if: ${{ steps.config.outputs.enable-infracost == 'true' && steps.atmos-plan.outputs.changes == 'true' }}
      id: infracost
      shell: bash
      run: |
        infracost diff \
          --path="${{ steps.vars.outputs.plan_file }}.json" \
          --format=diff \
          --project-name "${{ inputs.stack }}-${{ inputs.component }}" \
          --out-file=/tmp/infracost.txt
        infracost diff \
          --path="${{ steps.vars.outputs.plan_file }}.json" \
          --format=json \
          --project-name "${{ inputs.stack }}-${{ inputs.component }}" \
          --out-file=/tmp/infracost.json
        
        echo "finished=true" >> $GITHUB_OUTPUT

    - name: Debug Infracost
      if: ${{ steps.infracost.outputs.finished == 'true' && inputs.debug == 'true' }}
      shell: bash
      run: |
        cat ${{ steps.vars.outputs.plan_file }}.json
        cat /tmp/infracost.txt
        cat /tmp/infracost.json

    - name: Set Infracost Variables
      if: ${{ steps.infracost.outputs.finished == 'true' }}
      id: infracost-diff
      shell: bash
      run: |
        INFRACOST_DIFF_TOTAL_MONTHLY_COST=$(cat /tmp/infracost.json | jq --raw-output .diffTotalMonthlyCost)
        INFRACOST_DETAILS_DIFF_BREAKDOWN="$(cat /tmp/infracost.txt)"
        
        if [[ "${INFRACOST_DIFF_TOTAL_MONTHLY_COST}" == "0" ]]; then
          INFRA_COST_SUMMARY="Infracost Estimate: monthly cost will not change"
        elif [[ "${INFRACOST_DIFF_TOTAL_MONTHLY_COST:0:1}" == "-" ]]; then
          INFRA_COST_SUMMARY="Infracost Estimate: monthly cost will decrease by ${INFRACOST_DIFF_TOTAL_MONTHLY_COST} 📉"
        else
          INFRA_COST_SUMMARY="Infracost Estimate: monthly cost will increase by ${INFRACOST_DIFF_TOTAL_MONTHLY_COST} 📈"
        fi

        sed -i "s/%INFRACOST_SUMMARY%/${INFRA_COST_SUMMARY}/" ${{ steps.vars.outputs.step_summary_file }}
        sed -i -e '/%INFRACOST_DIFF%/{r /tmp/infracost.txt' -e 'd}' ${{ steps.vars.outputs.step_summary_file }}
        

    - name: Store Component Metadata to Artifacts
      if: ${{ steps.atmos-github-actions-enabled.outputs.value == 'true' && inputs.drift-detection-mode-enabled == 'true' }}
      shell: bash
      run: |
        echo -n '{ "stack": "${{ inputs.stack }}", "component": "${{ inputs.component }}", "componentPath": "${{ steps.vars.outputs.component_path }}", "drifted": '"${{ steps.atmos-plan.outputs.changes }}"', "error": '"${{ steps.atmos-plan.outputs.error }}"' }' > "metadata/${{ steps.vars.outputs.component_slug }}.metadata.json"

    - name: Publish Summary or Generate GitHub Issue Description for Drift Detection
      id: summary
      shell: bash
      working-directory: ./${{ steps.vars.outputs.component_path }}
      run: |
        if [[ "${{ inputs.drift-detection-mode-enabled }}" == "true" ]]; then
          STEP_SUMMARY_FILE="${{ steps.vars.outputs.issue_file }}"
        else
          STEP_SUMMARY_FILE="${{ steps.vars.outputs.step_summary_file }}"
        fi
        
        if [[ "${{ steps.atmos-plan.outputs.no-changes }}" == "true" ]]; then
          rm -f ${STEP_SUMMARY_FILE}
        fi
        
        if [ -f ${STEP_SUMMARY_FILE} ]; then
          echo "${STEP_SUMMARY_FILE} found"

          STEP_SUMMARY=$(cat ${STEP_SUMMARY_FILE} | jq -Rs .)
          echo "result=${STEP_SUMMARY}" >> $GITHUB_OUTPUT

          if [[ "${{ inputs.drift-detection-mode-enabled }}" == "false" ]]; then
            echo "Drift detection mode disabled"
            cat $STEP_SUMMARY_FILE >> $GITHUB_STEP_SUMMARY
          fi
        else 
          echo "${STEP_SUMMARY_FILE} not found"
          echo "result=\"\"" >> $GITHUB_OUTPUT
        fi

    - name: Upload Artifacts
      if: ${{ steps.atmos-github-actions-enabled.outputs.value == 'true' && inputs.drift-detection-mode-enabled == 'true' }}
      uses: actions/upload-artifact@v3
      with:
        name: metadata
        path: metadata
        retention-days: ${{ inputs.metadata-retention-days }}

    - name: Exit status
      if: ${{ steps.atmos-github-actions-enabled.outputs.value == 'true' }}
      shell: bash
      run: |
        exit ${{ steps.atmos-plan.outputs.result }}    
