name: 'GitHub Action Atmos Terraform Plan'
description: 'GitHub Action Atmos Terraform Plan'
author: hello@cloudposse.com
branding:
  icon: 'server'
  color: 'white'
inputs:
  component:
    description: "The name of the component to plan."
    required: true
  stack:
    description: "The stack name for the given component."
    required: true
  component-path:
    description: "The path to the base component. Atmos defines this value as component_path."
    required: true
  terraform-plan-role:
    description: "The AWS role to be used to plan Terraform."
    required: true
  terraform-state-role:
    description: "The AWS role to be used to retrieve the planfile from AWS."
    required: true
  terraform-state-bucket:
    description: "The S3 Bucket where the planfiles are stored."
    required: true
  terraform-state-table:
    description: "The DynamoDB table where planfile metadata is stored."
    required: true
  aws-region:
    description: "AWS region for assuming identity."
    required: false
    default: "us-east-1"
  atmos-version:
    description: "Atmos version to use for vendoring. Default 'latest'"
    required: false
    default: 'latest'
  atmos-config-path:
    description: "The path to the atmos.yaml file"
    required: false
    default: atmos.yaml
  terraform-version:
    description: 'The version of Terraform CLI to install. Instead of full version string you can also specify constraint string starting with "<" (for example `<1.13.0`) to install the latest version satisfying the constraint. A value of `latest` will install the latest version of Terraform CLI. Defaults to `latest`.'
    default: 'latest'
    required: false
  enable-infracost:
    description: "Whether to enable infracost summary. Requires secret `infracost-api-key` to be specified. Default: 'false"
    default: 'false'
    required: false
  infracost-api-key:
    description: "Infracost API key"
    required: false
  debug:
    description: "Enable action debug mode. Default: 'false'"
    default: 'false'
    required: false
  token:
    description:
      Used to pull node distributions for Atmos from Cloud Posse's GitHub repository. Since there's a default, this is typically
      not supplied by the user. When running this action on github.com, the default value is sufficient. When running on
      GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
    default: ${{ github.server_url == 'https://github.com' && github.token || '' }}

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ inputs.terraform-version }}
        terraform_wrapper: false

    - name: Install Node
      uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: Install Atmos
      uses: cloudposse/github-action-setup-atmos@v1
      env:
       ATMOS_CLI_CONFIG_PATH: ${{inputs.atmos-config-path}}
      with:
        atmos-version: ${{ inputs.atmos-version }}
        token: ${{ inputs.token }}
        install-wrapper: false

    - name: Initialize Job State
      shell: bash
      run: |
        echo "ACTIONS_ENABLED='false'" >> $GITHUB_ENV
        echo "HAS_CHANGES='false'" >> $GITHUB_ENV

    - name: Filter Atmos Settings Value
      uses: cloudposse/github-action-atmos-get-setting@v0
      id: atmos-settings
      with:
        component: ${{ inputs.component }}
        stack: ${{ inputs.stack }}
        settings-path: github.actions_enabled
    
    - name: Check if Action is Enabled
      shell: bash
      run: |
        [[ "${{ steps.atmos-settings.outputs.value }}" == "true" ]] && echo "ACTIONS_ENABLED='true'" >> $GITHUB_ENV || echo "ACTIONS_ENABLED='false'" >> $GITHUB_ENV

        if [[ "${{ steps.atmos-settings.outputs.value }}" == "true" ]]; then
          echo "ACTIONS_ENABLED='true'" >> $GITHUB_ENV
        else
          echo "ACTIONS_ENABLED='false'" >> $GITHUB_ENV
        fi

    - name: Component Enabled
      if: env.ACTIONS_ENABLED == 'true'
      shell: bash
      run: |
        echo "Component enabled"

    - name: Component Disabled
      if: env.ACTIONS_ENABLED != 'false'
      shell: bash
      run: |
        echo "Component disabled"

    - name: Print Env
      shell: bash
      run: |
        echo "env.ACTIONS_ENABLED=${{ env.ACTIONS_ENABLED }}"
        env

    # - name: Variables
    #   id: variables
    #   shell: bash
    #   run: |
    #     STACK_NAME=$(echo "${{ inputs.stack }}" | sed 's#/#_#g')
    #     COMPONENT_NAME=$(echo "${{ inputs.component }}" | sed 's#/#_#g')
    #     COMPONENT_SLUG="$STACK_NAME-$COMPONENT_NAME"
    #     PLAN_FILE_NAME="$STACK_NAME-$COMPONENT_NAME-${{ github.sha }}.planfile"
    #     PLAN_FILE_PATH=$(pwd)
    #     PLAN_FILE_JSON="$PLAN_FILE_NAME.json"
    #     LOCK_FILE="${{ inputs.component-path}}/.terraform.lock.hcl"
    #     ARTIFACTS_PATH="plan-artifacts/$STACK_NAME-$COMPONENT_NAME"

    #     echo "stack=$STACK_NAME" >> $GITHUB_OUTPUT
    #     echo "component=$COMPONENT_NAME" >> $GITHUB_OUTPUT
    #     echo "component_slug=$COMPONENT_SLUG" >> $GITHUB_OUTPUT
    #     echo "plan_file_name=$PLAN_FILE_NAME" >> $GITHUB_OUTPUT
    #     echo "plan_file_path=$PLAN_FILE_PATH" >> $GITHUB_OUTPUT
    #     echo "plan_file_json=$PLAN_FILE_JSON" >> $GITHUB_OUTPUT
    #     echo "lock_file=$LOCK_FILE" >> $GITHUB_OUTPUT
    #     echo "artifacts_path=$ARTIFACTS_PATH" >> $GITHUB_OUTPUT


    # # setup-tfcmt requires this PATH update when running on self-hosted (amazon linux)
    # # https://github.com/shmokmt/actions-setup-tfcmt/blob/main/action.yml#L11C1-L12C1
    # - name: Update path
    #   shell: bash
    #   run: |
    #     echo "/usr/local/bin" >> $GITHUB_PATH

    # - name: Setup tfcmt
    #   if: ${{ fromJSON(steps.settings.outputs.actions_enabled) }}
    #   uses: shmokmt/actions-setup-tfcmt@v2
    #   with:
    #     version: v4.4.1
    
    # - name: Configure Plan AWS Credentials
    #   if: ${{ fromJSON(steps.settings.outputs.actions_enabled) }}
    #   uses: aws-actions/configure-aws-credentials@v2.2.0
    #   with:
    #     aws-region: ${{ inputs.aws-region }}
    #     role-to-assume: ${{ inputs.terraform-plan-role }}
    #     role-session-name: "atmos-terraform-plan-gitops"
    #     mask-aws-account-id: "no"

    # - name: Atmos Terraform Plan
    #   if: ${{ fromJSON(steps.settings.outputs.actions_enabled) }}
    #   id: atmos-plan
    #   shell: bash
    #   run: |
    #     PLAN_FILE="${{ steps.variables.outputs.plan_file_path }}/${{ steps.variables.outputs.plan_file_name }}"

    #     TERRAFORM_OUTPUT=$(ATMOS_BASE_PATH=$GITHUB_WORKSPACE atmos terraform plan ${{ inputs.component }} \
    #       --stack ${{ inputs.stack }} \
    #       -out=$PLAN_FILE \
    #       -lock=false \
    #       -input=false \
    #       -no-color)

    #     if echo "$TERRAFORM_OUTPUT" | grep -q '^No changes. Your infrastructure matches the configuration.'; then
    #       echo "has_changes=false" >> $GITHUB_OUTPUT
    #       echo "No changes"
    #     else
    #       echo "has_changes=true" >> $GITHUB_OUTPUT
    #       echo "Found changes"
    #     fi

    #     cd "${{ inputs.component-path }}"     # terraform show should be execute from component dir
    #     terraform show -json "$PLAN_FILE" > "$PLAN_FILE.json" 2> error.log

    # - name: Configure State AWS Credentials
    #   if: ${{ fromJSON(steps.settings.outputs.actions_enabled) && fromJSON(steps.atmos-plan.outputs.has_changes) }}
    #   uses: aws-actions/configure-aws-credentials@v2.2.0
    #   with:
    #     aws-region: ${{ inputs.aws-region }}
    #     role-to-assume: ${{ inputs.terraform-state-role }}
    #     role-session-name: "atmos-terraform-state-gitops"
    #     mask-aws-account-id: "no"

    # - name: Retrieve Plan
    #   if: ${{ fromJSON(steps.settings.outputs.actions_enabled) && fromJSON(steps.atmos-plan.outputs.has_changes) }}
    #   uses: cloudposse/github-action-terraform-plan-storage@added-commitsha-overwrite-input
    #   id: retrieve-plan
    #   continue-on-error: true
    #   with:
    #     action: getPlan
    #     planPath: ./${{ steps.variables.outputs.plan_file_name }}.stored
    #     commitSHA: ${{ github.sha }}
    #     component: ${{ inputs.component }}
    #     stack: ${{ inputs.stack }}
    #     tableName: ${{ inputs.terraform-state-table }}
    #     bucketName: ${{ inputs.terraform-state-bucket }}

    # - name: Check
    #   if: ${{ fromJSON(steps.settings.outputs.actions_enabled) && fromJSON(steps.atmos-plan.outputs.has_changes) }}
    #   id: compare-plans
    #   shell: bash
    #   run: |
    #     PLAN_FILE="${{ steps.variables.outputs.plan_file_path }}/${{ steps.variables.outputs.plan_file_name }}"
    #     PLAN_FILE_JSON="$PLAN_FILE.json"
    #     PLAN_FILE_STORED="${{ steps.variables.outputs.plan_file_path }}/${{ steps.variables.outputs.plan_file_name }}.stored"
    #     PLAN_FILE_STORED_JSON="$PLAN_FILE_STORED.json"

    #     if [ -f "$PLAN_FILE_STORED" ]; then
    #       cd "${{ inputs.component-path }}"     # terraform show should be execute from component dir

    #       terraform show -json "$PLAN_FILE_STORED" > "$PLAN_FILE_STORED_JSON" 2> error.log

    #       jq '.relevant_attributes |= sort_by(.resource, .attribute)' "$PLAN_FILE_JSON" | jq 'del(.timestamp)' > current.json
    #       jq '.relevant_attributes |= sort_by(.resource, .attribute)' "$PLAN_FILE_STORED_JSON" | jq 'del(.timestamp)' > stored.json

    #       MD5_CURRENT=$(md5sum current.json | awk '{ print $1 }')
    #       MD5_STORED=$(md5sum stored.json | awk '{ print $1 }')

    #       echo "MD5_CURRENT: $MD5_CURRENT"
    #       echo "MD5_STORE: $MD5_STORED"

    #       if [ "$MD5_CURRENT" == "$MD5_STORED" ]; then
    #         echo "Plans are equal"
    #         echo "store_plans=false" >> $GITHUB_OUTPUT
    #       else
    #         echo "Plans changed"
    #         echo "store_plans=true" >> $GITHUB_OUTPUT
    #       fi
    #     else
    #       echo "New plan found"
    #       echo "store_plans=true" >> $GITHUB_OUTPUT
    #     fi

    # - name: Store Plan
    #   if: ${{ fromJSON(steps.settings.outputs.actions_enabled) && fromJSON(steps.atmos-plan.outputs.has_changes) && fromJSON(steps.compare-plans.outputs.store_plans) }}
    #   uses: cloudposse/github-action-terraform-plan-storage@v1
    #   id: store-plan
    #   with:
    #     action: storePlan
    #     planPath: ${{ steps.variables.outputs.plan_file_name }}
    #     component: ${{ inputs.component }}
    #     stack: ${{ inputs.stack }}
    #     tableName: ${{ inputs.terraform-state-table }}
    #     bucketName: ${{ inputs.terraform-state-bucket }}

    # - name: Store Lockfile
    #   if: ${{ fromJSON(steps.settings.outputs.actions_enabled) && fromJSON(steps.atmos-plan.outputs.has_changes) && fromJSON(steps.compare-plans.outputs.store_plans) }}
    #   uses: cloudposse/github-action-terraform-plan-storage@v1
    #   with:
    #     action: storePlan
    #     planPath: "${{ steps.variables.outputs.lock_file }}"
    #     component: ${{ inputs.component }}
    #     stack: "${{ inputs.stack }}-lockfile"
    #     tableName: ${{ inputs.terraform-state-table }}
    #     bucketName: ${{ inputs.terraform-state-bucket }}

    # # - name: Prepare Artifacts
    # #   if: ${{ fromJSON(steps.settings.outputs.actions_enabled) && fromJSON(steps.atmos-plan.outputs.has_changes) && !fromJSON(steps.compare-plans.outputs.store_plans) }}
    # #   shell: bash
    # #   run: |
    # #     mkdir -p artifacts
    # #     cp ${{ inputs.component-path }}/current.json artifacts/
    # #     cp ${{ inputs.component-path }}/stored.json artifacts/
    # #     PLAN_FILE="${{ steps.variables.outputs.plan_file_path }}/${{ steps.variables.outputs.plan_file_name }}"
    # #     PLAN_FILE_JSON="$PLAN_FILE.json"
    # #     PLAN_FILE_STORED="${{ steps.variables.outputs.plan_file_path }}/${{ steps.variables.outputs.plan_file_name }}.stored"
    # #     PLAN_FILE_STORED_JSON="$PLAN_FILE_STORED.json"
    # #     cp "$PLAN_FILE_JSON" artifacts/
    # #     cp "$PLAN_FILE_STORED_JSON" artifacts/

    # # - name: Upload Artifacts
    # #   uses: actions/upload-artifact@v3
    # #   with:
    # #     name: plan-artifacts
    # #     path: artifacts

    # - name: Setup Infracost
    #   if: ${{ fromJSON(steps.settings.outputs.actions_enabled) && fromJSON(steps.atmos-plan.outputs.has_changes) && fromJSON(inputs.enable-infracost) }}
    #   uses: infracost/actions/setup@v2
    #   with:
    #     api-key: ${{ inputs.infracost-api-key }}

    # - name: Generate Infracost diff
    #   if: ${{ fromJSON(steps.settings.outputs.actions_enabled) && fromJSON(steps.atmos-plan.outputs.has_changes) && fromJSON(inputs.enable-infracost) }}
    #   shell: bash
    #   run: |
    #     PLAN_FILE_JSON="${{ steps.variables.outputs.plan_file_path }}/${{ steps.variables.outputs.plan_file_json }}"

    #     infracost diff \
    #       --path=$PLAN_FILE_JSON \
    #       --format=diff \
    #       --project-name "${{ inputs.stack }}-${{ inputs.component }}" \
    #       --out-file=/tmp/infracost.txt
    #     infracost diff \
    #       --path=$PLAN_FILE_JSON \
    #       --format=json \
    #       --project-name "${{ inputs.stack }}-${{ inputs.component }}" \
    #       --out-file=/tmp/infracost.json

    # - name: Debug
    #   if: ${{ fromJSON(steps.settings.outputs.actions_enabled) && fromJSON(steps.atmos-plan.outputs.has_changes) && fromJSON(inputs.enable-infracost) && fromJSON(inputs.debug) }}
    #   shell: bash
    #   run: |
    #     cat ${{ steps.variables.outputs.plan_file_path }}/${{ steps.variables.outputs.plan_file_json }}
    #     cat /tmp/infracost.txt
    #     cat /tmp/infracost.json

    # - name: Set infracost variables
    #   if: ${{ fromJSON(steps.settings.outputs.actions_enabled) && fromJSON(steps.atmos-plan.outputs.has_changes) && fromJSON(inputs.enable-infracost) }}
    #   id: infracost-diff
    #   shell: bash
    #   run: |
    #     if [[ "${{ inputs.enable-infracost }}" == "true" ]]; then
    #       INFRACOST_DIFF_TOTAL_MONTHLY_COST=$(cat /tmp/infracost.json | jq --raw-output .diffTotalMonthlyCost)
    #       INFRACOST_DETAILS_DIFF_BREAKDOWN="$(cat /tmp/infracost.txt | base64 --wrap 0)"
    #     else
    #       INFRACOST_DIFF_TOTAL_MONTHLY_COST="0"
    #       INFRACOST_DETAILS_DIFF_BREAKDOWN=""
    #     fi

    #     echo "infracost_details_diff_breakdown=$INFRACOST_DETAILS_DIFF_BREAKDOWN" >> "$GITHUB_OUTPUT"
    #     echo "infracost_diff_total_monthly_cost=$INFRACOST_DIFF_TOTAL_MONTHLY_COST" >> "$GITHUB_OUTPUT"

    # - name: Post Plan to Step Summary
    #   if: ${{ fromJSON(steps.settings.outputs.actions_enabled) && fromJSON(steps.atmos-plan.outputs.has_changes) }}
    #   id: post-plan
    #   shell: bash
    #   run: |
    #     cd "${{ inputs.component-path }}"

    #     tfcmt \
    #       --config "${{ github.action_path }}/config/atmos_github_summary.yaml" \
    #       -owner "${{ github.repository_owner }}" \
    #       -repo "${{ github.event.repository.name }}" \
    #       -var "target:${{ inputs.stack }}-${{ inputs.component }}" \
    #       -var "component:${{ inputs.component }}" \
    #       -var "stack:${{ inputs.stack }}" \
    #       -var "job:${{ github.job }}" \
    #       -var "infracost_details_diff_breakdown:${{ steps.infracost-diff.outputs.infracost_details_diff_breakdown }}" \
    #       -var "infracost_total_monthly_cost:${{ steps.infracost-diff.outputs.infracost_diff_total_monthly_cost }}" \
    #       --output $GITHUB_STEP_SUMMARY \
    #       --log-level $([[ "${{ inputs.debug }}" == "true" ]] && echo "DEBUG" || echo "INFO") \
    #       plan -- terraform show ${{ steps.variables.outputs.plan_file_path }}/${{ steps.variables.outputs.plan_file_name }}

    # # - name: Prepare Artifacts
    # #   if: ${{ fromJSON(steps.settings.outputs.actions_enabled) && fromJSON(steps.atmos-plan.outputs.has_changes) }}
    # #   shell: bash
    # #   run: |
    # #     mkdir -p "${{ steps.variables.outputs.artifacts_path }}"
    # #     echo -n '{ "stack": "${{ inputs.stack }}", "component": "${{ inputs.component }}", "componentPath": "${{ inputs.component-path }}" }' > "${{ steps.variables.outputs.artifacts_path }}/${{ steps.variables.outputs.component_slug }}.metadata.json"
    # #     cp "${{ steps.variables.outputs.plan_file_path }}/${{ steps.variables.outputs.plan_file_name }}" "${{ steps.variables.outputs.artifacts_path }}/${{ steps.variables.outputs.component_slug }}.terraform.planfile"
    # #     cp "${{ steps.variables.outputs.plan_file_path }}/${{ steps.variables.outputs.plan_file_json }}" "${{ steps.variables.outputs.artifacts_path }}/${{ steps.variables.outputs.component_slug }}.terraform.json"
    # #     cp "${{ steps.variables.outputs.lock_file }}" "${{ steps.variables.outputs.artifacts_path }}/${{ steps.variables.outputs.component_slug }}.terraform.lockfile"

    # # - name: Upload Artifacts
    # #   if: ${{ fromJSON(steps.settings.outputs.actions_enabled) && fromJSON(steps.atmos-plan.outputs.has_changes) }}
    # #   uses: actions/upload-artifact@v3
    # #   with:
    # #     name: plan-artifacts
    # #     path: "${{ steps.variables.outputs.artifacts_path }}"