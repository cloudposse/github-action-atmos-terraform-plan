name: 'GitHub Action Atmos Terraform Plan'
description: 'GitHub Action Atmos Terraform Plan'
author: hello@cloudposse.com
branding:
  icon: 'server'
  color: 'white'
inputs:
  component:
    description: "The name of the component to plan."
    required: true
  stack:
    description: "The stack name for the given component."
    required: true
  component-path:
    description: "The path to the base component. Atmos defines this value as component_path."
    required: true
  sha:
    description: "SHA to use"
    required: true
    default: "${{ github.event.pull_request.head.sha }}"
  drift-detection-mode-enabled:
    description: "Indicate whether this action is used in drift detection workflow."
    required: true
    default: 'false'
  terraform-plan-role:
    description: "The AWS role to be used to plan Terraform."
    required: true
  terraform-state-role:
    description: "The AWS role to be used to retrieve the planfile from AWS."
    required: true
  terraform-state-bucket:
    description: "The S3 Bucket where the planfiles are stored."
    required: true
  terraform-state-table:
    description: "The DynamoDB table where planfile metadata is stored."
    required: true
  aws-region:
    description: "AWS region for assuming identity."
    required: false
    default: "us-east-1"
  atmos-version:
    description: "Atmos version to use for vendoring. Default 'latest'"
    required: false
    default: 'latest'
  atmos-config-path:
    description: "The path to the atmos.yaml file"
    required: false
    default: atmos.yaml
  terraform-version:
    description: 'The version of Terraform CLI to install. Instead of full version string you can also specify constraint string starting with "<" (for example `<1.13.0`) to install the latest version satisfying the constraint. A value of `latest` will install the latest version of Terraform CLI. Defaults to `latest`.'
    default: 'latest'
    required: false
  enable-infracost:
    description: "Whether to enable infracost summary. Requires secret `infracost-api-key` to be specified. Default: 'false"
    default: 'false'
    required: false
  infracost-api-key:
    description: "Infracost API key"
    required: false
  metadata-retention-days:
    description: "Infracost API key"
    required: false
    default: "1"
  branding-logo-image:
    description: "Branding logo image url"
    required: false
    default: "https://cloudposse.com/logo-300x69.svg"
  branding-logo-url:
    description: "Branding logo url"
    required: false
    default: "https://cloudposse.com/"
  debug:
    description: "Enable action debug mode. Default: 'false'"
    default: 'false'
    required: false
  token:
    description:
      Used to pull node distributions for Atmos from Cloud Posse's GitHub repository. Since there's a default, this is typically
      not supplied by the user. When running this action on github.com, the default value is sufficient. When running on
      GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
    default: ${{ github.server_url == 'https://github.com' && github.token || '' }}
outputs:
  summary:
    description: "Summary"
    value: "${{ steps.summary.outputs.result }}"

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ inputs.terraform-version }}
        terraform_wrapper: false

    - name: Install Node
      uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: Install Atmos
      uses: cloudposse/github-action-setup-atmos@v1
      env:
       ATMOS_CLI_CONFIG_PATH: ${{inputs.atmos-config-path}}
      with:
        atmos-version: ${{ inputs.atmos-version }}
        token: ${{ inputs.token }}
        install-wrapper: false

    - name: Filter Atmos Settings Value
      uses: cloudposse/github-action-atmos-get-setting@v0
      id: atmos-github-actions-enabled
      with:
        component: ${{ inputs.component }}
        stack: ${{ inputs.stack }}
        settings-path: github.actions_enabled

    - name: Update Global Path for tfcmt
      if: ${{ steps.atmos-github-actions-enabled.outputs.value == 'true' }}
      shell: bash
      run: |
        # setup-tfcmt requires this PATH update when running on self-hosted (amazon linux) https://github.com/shmokmt/actions-setup-tfcmt/blob/main/action.yml#L11C1-L12C1
        echo "/usr/local/bin" >> $GITHUB_PATH

    - name: Install tfcmt
      if: ${{ steps.atmos-github-actions-enabled.outputs.value == 'true' }}
      uses: shmokmt/actions-setup-tfcmt@v2
      with:
        version: v4.6.0

    - name: Define Job Variables
      if: ${{ steps.atmos-github-actions-enabled.outputs.value == 'true' }}
      id: vars
      shell: bash
      run: |
        STACK_NAME=$(echo "${{ inputs.stack }}" | sed 's#/#_#g')
        COMPONENT_NAME=$(echo "${{ inputs.component }}" | sed 's#/#_#g')
        COMPONENT_SLUG="$STACK_NAME-$COMPONENT_NAME"
        PLAN_FILE="$GITHUB_WORKSPACE/${{ inputs.component-path}}/$COMPONENT_SLUG-${{ inputs.sha }}.planfile"
        LOCK_FILE="$GITHUB_WORKSPACE/${{ inputs.component-path}}/.terraform.lock.hcl"

        echo "stack_name=$STACK_NAME" >> $GITHUB_OUTPUT
        echo "component_name=$COMPONENT_NAME" >> $GITHUB_OUTPUT
        echo "component_slug=$COMPONENT_SLUG" >> $GITHUB_OUTPUT
        echo "plan_file=$PLAN_FILE" >> $GITHUB_OUTPUT
        echo "lock_file=$LOCK_FILE" >> $GITHUB_OUTPUT

    - name: Configure Plan AWS Credentials
      if: ${{ steps.atmos-github-actions-enabled.outputs.value == 'true' }}
      uses: aws-actions/configure-aws-credentials@v4.0.0
      with:
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: ${{ inputs.terraform-plan-role }}
        role-session-name: "atmos-terraform-plan-gitops"
        mask-aws-account-id: "no"

    - name: Prepare Artifacts Directory
      if: ${{ steps.atmos-github-actions-enabled.outputs.value == 'true' }}
      shell: bash
      run: |
        mkdir -p metadata

    - name: Atmos Terraform Plan
      if: ${{ steps.atmos-github-actions-enabled.outputs.value == 'true' }}
      id: atmos-plan
      shell: bash
      run: |
        STEP_SUMMARY_FILE="$GITHUB_WORKSPACE/metadata/step-summary-${{ steps.vars.outputs.component_slug }}.md"
        
        if [[ "${{ inputs.drift-detection-mode-enabled }}" == "true" ]]; then
          TEMPLATE_FILE="${{ github.action_path }}/config/github_issue_description.yaml"
        else 
          TEMPLATE_FILE="${{ github.action_path }}/config/atmos_github_summary.yaml"
        fi
        
        set +e 
        
        TERRAFORM_OUTPUT=$( \
          tfcmt \
          --config ${TEMPLATE_FILE} \
          -owner "${{ github.repository_owner }}" \
          -repo "${{ github.event.repository.name }}" \
          -var "target:${{ inputs.stack }}-${{ inputs.component }}" \
          -var "component:${{ inputs.component }}" \
          -var "componentPath:${{ inputs.component-path }}" \
          -var "commitSHA:${{ inputs.sha }}" \
          -var "stack:${{ inputs.stack }}" \
          -var "job:${{ github.job }}" \
          -var "logoImage:${{ inputs.branding-logo-image }}" \
          -var "logoUrl:${{ inputs.branding-logo-url }}" \
          -var "infracost_enabled:${{ inputs.enable-infracost }}" \
          --output "$STEP_SUMMARY_FILE" \
          --log-level $([[ "${{ inputs.debug }}" == "true" ]] && echo "DEBUG" || echo "INFO") \
          plan -- atmos terraform plan ${{ inputs.component }} \
                  --stack ${{ inputs.stack }} \
                  -out="${{ steps.vars.outputs.plan_file }}" \
                  -lock=false \
                  -input=false \
                  -no-color
        )
        TERRAFORM_RESULT=$?

        set -e
        
        echo -ne "${TERRAFORM_OUTPUT}"
        
        HAS_CHANGES=false
        HAS_ERROR=false
        if [[ "${TERRAFORM_RESULT}" == "0" ]]; then
          if echo "$TERRAFORM_OUTPUT" | grep -q '^No changes. Your infrastructure matches the configuration.'; then
            echo "No changes found"
            rm -f ${STEP_SUMMARY_FILE}
          else
            HAS_CHANGES=true
            echo "Found changes"
          fi
        else
          HAS_ERROR=true
        fi

        echo "result=${TERRAFORM_RESULT}" >> $GITHUB_OUTPUT
        echo "changes=${HAS_CHANGES}" >> $GITHUB_OUTPUT
        echo "error=${HAS_ERROR}" >> $GITHUB_OUTPUT

    - name: Convert PLANFILE to JSON
      if: ${{ steps.atmos-plan.outputs.changes == 'true' }}
      shell: bash
      run: |
        cd "${{ inputs.component-path }}"
        terraform show -json "${{ steps.vars.outputs.plan_file }}" > "${{ steps.vars.outputs.plan_file }}.json"

    - name: Configure State AWS Credentials
      if: ${{ steps.atmos-plan.outputs.changes == 'true' }}
      uses: aws-actions/configure-aws-credentials@v4.0.0
      with:
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: ${{ inputs.terraform-state-role }}
        role-session-name: "atmos-terraform-state-gitops"
        mask-aws-account-id: "no"

    - name: Retrieve Plan
      if: ${{ steps.atmos-plan.outputs.changes == 'true' }}
      uses: cloudposse/github-action-terraform-plan-storage@v1
      id: retrieve-plan
      continue-on-error: true
      with:
        action: getPlan
        planPath: "${{ steps.vars.outputs.plan_file }}.stored"
        commitSHA: ${{ inputs.sha }}
        component: ${{ inputs.component }}
        stack: ${{ inputs.stack }}
        tableName: ${{ inputs.terraform-state-table }}
        bucketName: ${{ inputs.terraform-state-bucket }}
        failOnMissingPlan: "false"

    - name: Compare Current and Stored PLANFILEs
      if: ${{ steps.atmos-plan.outputs.changes == 'true' }}
      id: new-plan
      shell: bash
      run: |
        PLAN_FILE="${{ steps.vars.outputs.plan_file }}"
        PLAN_FILE_STORED="${{ steps.vars.outputs.plan_file }}.stored"

        NEW_PLAN_FOUND=false
        if [ -f "$PLAN_FILE_STORED" ]; then
          cd "${{ inputs.component-path }}"
          
          terraform show -json "$PLAN_FILE_STORED" > "$PLAN_FILE_STORED.json"
        
          # sort and remove timestamp
          jq 'if has("relevant_attributes") then .relevant_attributes |= sort_by(.resource, .attribute) else . end' "$PLAN_FILE.json" | jq 'del(.timestamp)' > current.json
          jq 'if has("relevant_attributes") then .relevant_attributes |= sort_by(.resource, .attribute) else . end' "$PLAN_FILE_STORED.json" | jq 'del(.timestamp)' > stored.json
        
          # calculate checksums of stored and current plans
          MD5_CURRENT=$(md5sum current.json | awk '{ print $1 }')
          MD5_STORED=$(md5sum stored.json | awk '{ print $1 }')

          if [ "$MD5_CURRENT" == "$MD5_STORED" ]; then
            echo "Current plan is equal to stored plan"
          else
            echo "Current plan is different from stored plan"
            NEW_PLAN_FOUND=true
          fi
        else
          echo "New plan found"
          NEW_PLAN_FOUND=true
        fi
        echo "found=${NEW_PLAN_FOUND}" >> $GITHUB_OUTPUT

    - name: Store New Plan
      if: ${{ steps.new-plan.outputs.found == 'true' }}
      uses: cloudposse/github-action-terraform-plan-storage@v1
      id: store-plan
      with:
        action: storePlan
        commitSHA: ${{ inputs.sha }}
        planPath: ${{ steps.vars.outputs.plan_file }}
        component: ${{ inputs.component }}
        stack: ${{ inputs.stack }}
        tableName: ${{ inputs.terraform-state-table }}
        bucketName: ${{ inputs.terraform-state-bucket }}

    - name: Store Lockfile for New Plan
      if: ${{ steps.new-plan.outputs.found == 'true' }}
      uses: cloudposse/github-action-terraform-plan-storage@v1
      with:
        action: storePlan
        commitSHA: ${{ inputs.sha }}
        planPath: ${{ steps.vars.outputs.lock_file }}
        component: ${{ inputs.component }}
        stack: ${{ inputs.stack }}-lockfile
        tableName: ${{ inputs.terraform-state-table }}
        bucketName: ${{ inputs.terraform-state-bucket }}

    - name: Setup Infracost
      if: ${{ inputs.enable-infracost == 'true' }}
      uses: infracost/actions/setup@v2
      with:
        api-key: ${{ inputs.infracost-api-key }}

    - name: Generate Infracost Diff
      if: ${{ inputs.enable-infracost == 'true' && steps.atmos-plan.outputs.changes == 'true' }}
      shell: bash
      run: |
        infracost diff \
          --path="${{ steps.vars.outputs.plan_file }}.json" \
          --format=diff \
          --project-name "${{ inputs.stack }}-${{ inputs.component }}" \
          --out-file=/tmp/infracost.txt
        infracost diff \
          --path="${{ steps.vars.outputs.plan_file }}.json" \
          --format=json \
          --project-name "${{ inputs.stack }}-${{ inputs.component }}" \
          --out-file=/tmp/infracost.json

    - name: Debug Infracost
      if: ${{ inputs.enable-infracost == 'true' && inputs.debug == 'true' && steps.atmos-plan.outputs.changes == 'true' }}
      shell: bash
      run: |
        cat ${{ steps.vars.outputs.plan_file }}.json
        cat /tmp/infracost.txt
        cat /tmp/infracost.json

    - name: Set Infracost Variables
      if: ${{ inputs.enable-infracost == 'true' && steps.atmos-plan.outputs.changes == 'true' }}
      id: infracost-diff
      shell: bash
      run: |
        STEP_SUMMARY_FILE="$GITHUB_WORKSPACE/metadata/step-summary-${{ steps.vars.outputs.component_slug }}.md"
        
        INFRACOST_DIFF_TOTAL_MONTHLY_COST=$(cat /tmp/infracost.json | jq --raw-output .diffTotalMonthlyCost)
        INFRACOST_DETAILS_DIFF_BREAKDOWN="$(cat /tmp/infracost.txt)"
        
        if [[ "${INFRACOST_DIFF_TOTAL_MONTHLY_COST}" == "0" ]]; then
          INFRA_COST_SUMMARY="Infracost Estimate: monthly cost will not change"
        elif [[ "${INFRACOST_DIFF_TOTAL_MONTHLY_COST:0:1}" == "-" ]]; then
          INFRA_COST_SUMMARY="Infracost Estimate: monthly cost will decrease by ${INFRACOST_DIFF_TOTAL_MONTHLY_COST} 📉"
        else
          INFRA_COST_SUMMARY="Infracost Estimate: monthly cost will increase by ${INFRACOST_DIFF_TOTAL_MONTHLY_COST} 📈"
        fi

        sed -i "s/%INFRACOST_SUMMARY%/${INFRA_COST_SUMMARY}/" ${STEP_SUMMARY_FILE}
        sed -i -e '/%INFRACOST_DIFF%/{r /tmp/infracost.txt' -e 'd}' ${STEP_SUMMARY_FILE}
        

    - name: Store Component Metadata to Artifacts
      if: ${{ inputs.drift-detection-mode-enabled  == 'true' }}
      shell: bash
      run: |
        echo -n '{ "stack": "${{ inputs.stack }}", "component": "${{ inputs.component }}", "componentPath": "${{ inputs.component-path }}", "drifted": '"${{ steps.atmos-plan.outputs.changes }}"' }' > "metadata/${{ steps.vars.outputs.component_slug }}.metadata.json"

    - name: Publish Summary or Generate GitHub Issue Description for Drift Detection
      id: summary
      if: always()
      shell: bash
      run: |
        cd "${{ inputs.component-path }}"

        STEP_SUMMARY_FILE="$GITHUB_WORKSPACE/metadata/step-summary-${{ steps.vars.outputs.component_slug }}.md"
      
        if [ -f ${STEP_SUMMARY_FILE} ]; then
          echo "${STEP_SUMMARY_FILE} found"

          STEP_SUMMARY=$(cat ${STEP_SUMMARY_FILE} | jq -Rs .)
          echo "result=${STEP_SUMMARY}" >> $GITHUB_OUTPUT

          if [[ "${{ inputs.drift-detection-mode-enabled }}" == "false" ]]; then
            echo "Drift detection mode disabled"
            cat $STEP_SUMMARY_FILE >> $GITHUB_STEP_SUMMARY
          else
            echo "Drift detection mode enabled"
            mv $STEP_SUMMARY_FILE $GITHUB_WORKSPACE/metadata/issue-description-${{ steps.vars.outputs.component_slug }}.md
          fi
        else 
          echo "${STEP_SUMMARY_FILE} not found"
          echo "result=\"\"" >> $GITHUB_OUTPUT
        fi

    - name: Upload Artifacts
      if: ${{ inputs.drift-detection-mode-enabled  && (steps.atmos-plan.outputs.changes == 'true' || steps.atmos-plan.outputs.error == 'true' ) }}
      uses: actions/upload-artifact@v3
      with:
        name: metadata
        path: metadata
        retention-days: ${{ inputs.metadata-retention-days }}

    - name: Exit status
      shell: bash
      run: |
        exit ${{ steps.atmos-plan.outputs.result }}    
