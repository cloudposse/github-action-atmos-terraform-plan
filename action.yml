name: 'GitHub Action Atmos Terraform Plan'
description: 'GitHub Action Atmos Terraform Plan'
author: hello@cloudposse.com
branding:
  icon: 'server'
  color: 'white'
inputs:
  component:
    description: "The name of the component to plan."
    required: true
  stack:
    description: "The stack name for the given component."
    required: true
  component-path:
    description: "The path to the base component. Atmos defines this value as component_path."
    required: true
  sha:
    description: "SHA to use"
    required: true
    default: "${{ github.event.pull_request.head.sha }}"
  drift-detection-mode-enabled:
    description: "Indicate whether this action is used in drift detection workflow."
    required: true
    default: 'false'
  terraform-plan-role:
    description: "The AWS role to be used to plan Terraform."
    required: true
  terraform-state-role:
    description: "The AWS role to be used to retrieve the planfile from AWS."
    required: true
  terraform-state-bucket:
    description: "The S3 Bucket where the planfiles are stored."
    required: true
  terraform-state-table:
    description: "The DynamoDB table where planfile metadata is stored."
    required: true
  aws-region:
    description: "AWS region for assuming identity."
    required: false
    default: "us-east-1"
  atmos-version:
    description: "Atmos version to use for vendoring. Default 'latest'"
    required: false
    default: 'latest'
  atmos-config-path:
    description: "The path to the atmos.yaml file"
    required: false
    default: atmos.yaml
  terraform-version:
    description: 'The version of Terraform CLI to install. Instead of full version string you can also specify constraint string starting with "<" (for example `<1.13.0`) to install the latest version satisfying the constraint. A value of `latest` will install the latest version of Terraform CLI. Defaults to `latest`.'
    default: 'latest'
    required: false
  enable-infracost:
    description: "Whether to enable infracost summary. Requires secret `infracost-api-key` to be specified. Default: 'false"
    default: 'false'
    required: false
  infracost-api-key:
    description: "Infracost API key"
    required: false
  metadata-retention-days:
    description: "Infracost API key"
    required: false
    default: "1"
  branding-logo-image:
    description: "Branding logo image url"
    required: false
    default: "https://cloudposse.com/logo-300x69.svg"
  branding-logo-url:
    description: "Branding logo url"
    required: false
    default: "https://cloudposse.com/"
  debug:
    description: "Enable action debug mode. Default: 'false'"
    default: 'false'
    required: false
  token:
    description:
      Used to pull node distributions for Atmos from Cloud Posse's GitHub repository. Since there's a default, this is typically
      not supplied by the user. When running this action on github.com, the default value is sufficient. When running on
      GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
    default: ${{ github.server_url == 'https://github.com' && github.token || '' }}

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ inputs.terraform-version }}
        terraform_wrapper: false

    - name: Install Node
      uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: Install Atmos
      uses: cloudposse/github-action-setup-atmos@v1
      env:
       ATMOS_CLI_CONFIG_PATH: ${{inputs.atmos-config-path}}
      with:
        atmos-version: ${{ inputs.atmos-version }}
        token: ${{ inputs.token }}
        install-wrapper: false

    - name: Define Job Control State Variables
      shell: bash
      run: |
        echo "DEBUG_ENABLED=${{ inputs.debug }}" >> $GITHUB_ENV
        echo "ACTIONS_ENABLED=false" >> $GITHUB_ENV
        echo "HAS_CHANGES=false" >> $GITHUB_ENV
        echo "NEW_PLAN_FOUND=false" >> $GITHUB_ENV
        echo "INFRACOST_ENABLED=false" >> $GITHUB_ENV
        echo "DRIFT_DETECTION_MODE_ENABLED=${{ inputs.drift-detection-mode-enabled }}" >> $GITHUB_ENV

    - name: Filter Atmos Settings Value
      uses: cloudposse/github-action-atmos-get-setting@v0
      id: atmos-settings
      with:
        component: ${{ inputs.component }}
        stack: ${{ inputs.stack }}
        settings-path: github.actions_enabled

    - name: Check If GitHub Actions is Enabled For Component
      shell: bash
      run: |
        if [[ "${{ steps.atmos-settings.outputs.value }}" == "true" ]]; then
          echo "ACTIONS_ENABLED=true" >> $GITHUB_ENV
        else
          echo "ACTIONS_ENABLED=false" >> $GITHUB_ENV
        fi

    - name: Update Global Path for tfcmt
      if: env.ACTIONS_ENABLED == 'true'
      shell: bash
      run: |
        # setup-tfcmt requires this PATH update when running on self-hosted (amazon linux) https://github.com/shmokmt/actions-setup-tfcmt/blob/main/action.yml#L11C1-L12C1
        echo "/usr/local/bin" >> $GITHUB_PATH

    - name: Install tfcmt
      if: env.ACTIONS_ENABLED == 'true'
      uses: shmokmt/actions-setup-tfcmt@v2
      with:
        version: v4.4.1

    - name: Define Job Variables
      if: env.ACTIONS_ENABLED == 'true'
      id: vars
      shell: bash
      run: |
        STACK_NAME=$(echo "${{ inputs.stack }}" | sed 's#/#_#g')
        COMPONENT_NAME=$(echo "${{ inputs.component }}" | sed 's#/#_#g')
        COMPONENT_SLUG="$STACK_NAME-$COMPONENT_NAME"
        PLAN_FILE="$GITHUB_WORKSPACE/${{ inputs.component-path}}/$COMPONENT_SLUG-${{ inputs.sha }}.planfile"
        LOCK_FILE="$GITHUB_WORKSPACE/${{ inputs.component-path}}/.terraform.lock.hcl"

        echo "stack_name=$STACK_NAME" >> $GITHUB_OUTPUT
        echo "component_name=$COMPONENT_NAME" >> $GITHUB_OUTPUT
        echo "component_slug=$COMPONENT_SLUG" >> $GITHUB_OUTPUT
        echo "plan_file=$PLAN_FILE" >> $GITHUB_OUTPUT
        echo "lock_file=$LOCK_FILE" >> $GITHUB_OUTPUT

    - name: Configure Plan AWS Credentials
      if: env.ACTIONS_ENABLED == 'true'
      uses: aws-actions/configure-aws-credentials@v3.0.2
      with:
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: ${{ inputs.terraform-plan-role }}
        role-session-name: "atmos-terraform-plan-gitops"
        mask-aws-account-id: "no"

    - name: Atmos Terraform Plan
      if: env.ACTIONS_ENABLED == 'true'
      id: atmos-plan
      shell: bash
      run: |
        TERRAFORM_OUTPUT=$(ATMOS_BASE_PATH=$GITHUB_WORKSPACE atmos terraform plan ${{ inputs.component }} \
          --stack ${{ inputs.stack }} \
          -out="${{ steps.vars.outputs.plan_file }}" \
          -lock=false \
          -input=false \
          -no-color)

        if echo "$TERRAFORM_OUTPUT" | grep -q '^No changes. Your infrastructure matches the configuration.'; then
          echo "HAS_CHANGES=false" >> $GITHUB_ENV
          echo "No changes found"
        else
          echo "HAS_CHANGES=true" >> $GITHUB_ENV
          echo "Found changes"
        fi

    - name: Convert PLANFILE to JSON
      if: env.HAS_CHANGES == 'true'
      shell: bash
      run: |
        cd "${{ inputs.component-path }}"
        terraform show -json "${{ steps.vars.outputs.plan_file }}" > "${{ steps.vars.outputs.plan_file }}.json"

    - name: Configure State AWS Credentials
      if: env.HAS_CHANGES == 'true'
      uses: aws-actions/configure-aws-credentials@v3.0.2
      with:
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: ${{ inputs.terraform-state-role }}
        role-session-name: "atmos-terraform-state-gitops"
        mask-aws-account-id: "no"

    - name: Retrieve Plan
      if: env.HAS_CHANGES == 'true'
      uses: cloudposse/github-action-terraform-plan-storage@v1
      id: retrieve-plan
      continue-on-error: true
      with:
        action: getPlan
        planPath: "${{ steps.vars.outputs.plan_file }}.stored"
        commitSHA: ${{ inputs.sha }}
        component: ${{ inputs.component }}
        stack: ${{ inputs.stack }}
        tableName: ${{ inputs.terraform-state-table }}
        bucketName: ${{ inputs.terraform-state-bucket }}
        failOnMissingPlan: "false"

    - name: Compare Current and Stored PLANFILEs
      if: env.HAS_CHANGES == 'true'
      shell: bash
      run: |
        PLAN_FILE="${{ steps.vars.outputs.plan_file }}"
        PLAN_FILE_STORED="${{ steps.vars.outputs.plan_file }}.stored"

        if [ -f "$PLAN_FILE_STORED" ]; then
          cd "${{ inputs.component-path }}"

          terraform show -json "$PLAN_FILE_STORED" > "$PLAN_FILE_STORED.json"

          # sort and remove timestamp
          jq '.relevant_attributes |= sort_by(.resource, .attribute)' "$PLAN_FILE.json" | jq 'del(.timestamp)' > current.json
          jq '.relevant_attributes |= sort_by(.resource, .attribute)' "$PLAN_FILE_STORED.json" | jq 'del(.timestamp)' > stored.json

          # calculate checksums of stored and current plans
          MD5_CURRENT=$(md5sum current.json | awk '{ print $1 }')
          MD5_STORED=$(md5sum stored.json | awk '{ print $1 }')

          if [ "$MD5_CURRENT" == "$MD5_STORED" ]; then
            echo "Current plan is equal to stored plan"
            echo "NEW_PLAN_FOUND=false" >> $GITHUB_ENV
          else
            echo "Current plan is different from stored plan"
            echo "NEW_PLAN_FOUND=true" >> $GITHUB_ENV
          fi
        else
          echo "New plan found"
          echo "NEW_PLAN_FOUND=true" >> $GITHUB_ENV
        fi

    - name: Store New Plan
      if: env.NEW_PLAN_FOUND == 'true'
      uses: cloudposse/github-action-terraform-plan-storage@v1
      id: store-plan
      with:
        action: storePlan
        commitSHA: ${{ inputs.sha }}
        planPath: ${{ steps.vars.outputs.plan_file }}
        component: ${{ inputs.component }}
        stack: ${{ inputs.stack }}
        tableName: ${{ inputs.terraform-state-table }}
        bucketName: ${{ inputs.terraform-state-bucket }}

    - name: Store Lockfile for New Plan
      if: env.NEW_PLAN_FOUND == 'true'
      uses: cloudposse/github-action-terraform-plan-storage@v1
      with:
        action: storePlan
        commitSHA: ${{ inputs.sha }}
        planPath: ${{ steps.vars.outputs.lock_file }}
        component: ${{ inputs.component }}
        stack: ${{ inputs.stack }}-lockfile
        tableName: ${{ inputs.terraform-state-table }}
        bucketName: ${{ inputs.terraform-state-bucket }}

    - name: Check Whether Infracost is Enabled
      if: env.HAS_CHANGES == 'true'
      shell: bash
      run: |
        if [[ "${{ inputs.enable-infracost }}" == "true" ]]; then
          echo "INFRACOST_ENABLED=true" >> $GITHUB_ENV
        else
          echo "INFRACOST_ENABLED=false" >> $GITHUB_ENV
        fi

    - name: Setup Infracost
      if: env.INFRACOST_ENABLED == 'true'
      uses: infracost/actions/setup@v2
      with:
        api-key: ${{ inputs.infracost-api-key }}

    - name: Generate Infracost Diff
      if: env.INFRACOST_ENABLED == 'true'
      shell: bash
      run: |
        infracost diff \
          --path="${{ steps.vars.outputs.plan_file }}.json" \
          --format=diff \
          --project-name "${{ inputs.stack }}-${{ inputs.component }}" \
          --out-file=/tmp/infracost.txt
        infracost diff \
          --path="${{ steps.vars.outputs.plan_file }}.json" \
          --format=json \
          --project-name "${{ inputs.stack }}-${{ inputs.component }}" \
          --out-file=/tmp/infracost.json

    - name: Debug Infracost
      if: env.INFRACOST_ENABLED == 'true' && env.DEBUG_ENABLED == 'true'
      shell: bash
      run: |
        cat ${{ steps.vars.outputs.plan_file }}.json
        cat /tmp/infracost.txt
        cat /tmp/infracost.json

    - name: Set Infracost Variables
      if: env.INFRACOST_ENABLED == 'true'
      id: infracost-diff
      shell: bash
      run: |
        if [[ "${{ inputs.enable-infracost }}" == "true" ]]; then
          INFRACOST_DIFF_TOTAL_MONTHLY_COST=$(cat /tmp/infracost.json | jq --raw-output .diffTotalMonthlyCost)
          INFRACOST_DETAILS_DIFF_BREAKDOWN="$(cat /tmp/infracost.txt | base64 --wrap 0)"
        else
          INFRACOST_DIFF_TOTAL_MONTHLY_COST="0"
          INFRACOST_DETAILS_DIFF_BREAKDOWN=""
        fi

        echo "infracost_details_diff_breakdown=$INFRACOST_DETAILS_DIFF_BREAKDOWN" >> "$GITHUB_OUTPUT"
        echo "infracost_diff_total_monthly_cost=$INFRACOST_DIFF_TOTAL_MONTHLY_COST" >> "$GITHUB_OUTPUT"

    - name: Prepare Artifacts Directory
      shell: bash
      run: |
        mkdir -p metadata

    - name: Store Component Metadata to Artifacts
      if: env.DRIFT_DETECTION_MODE_ENABLED == 'true'
      shell: bash
      run: |
        echo -n '{ "stack": "${{ inputs.stack }}", "component": "${{ inputs.component }}", "componentPath": "${{ inputs.component-path }}", "drifted": '"$HAS_CHANGES"' }' > "metadata/${{ steps.vars.outputs.component_slug }}.metadata.json"

    - name: Post Details to Step Summary
      if: env.HAS_CHANGES == 'true'
      shell: bash
      run: |
        cd "${{ inputs.component-path }}"

        STEP_SUMMARY_FILE="$GITHUB_WORKSPACE/metadata/step-summary-${{ steps.vars.outputs.component_slug }}.md"

        tfcmt \
          --config "${{ github.action_path }}/config/atmos_github_summary.yaml" \
          -owner "${{ github.repository_owner }}" \
          -repo "${{ github.event.repository.name }}" \
          -var "target:${{ inputs.stack }}-${{ inputs.component }}" \
          -var "component:${{ inputs.component }}" \
          -var "stack:${{ inputs.stack }}" \
          -var "job:${{ github.job }}" \
          -var "logoImage:${{ inputs.branding-logo-image }}" \
          -var "logoUrl:${{ inputs.branding-logo-url }}" \
          -var "infracost_details_diff_breakdown:${{ steps.infracost-diff.outputs.infracost_details_diff_breakdown }}" \
          -var "infracost_total_monthly_cost:${{ steps.infracost-diff.outputs.infracost_diff_total_monthly_cost }}" \
          --output "$STEP_SUMMARY_FILE" \
          --log-level $([[ "${{ inputs.debug }}" == "true" ]] && echo "DEBUG" || echo "INFO") \
          plan -- terraform show ${{ steps.vars.outputs.plan_file }}

        if [[ "$DRIFT_DETECTION_MODE_ENABLED" == "false" ]]; then
          cat $STEP_SUMMARY_FILE >> $GITHUB_STEP_SUMMARY
        fi

    - name: Generate GitHub Issue Description for Drift Detection
      if: env.HAS_CHANGES == 'true' && env.DRIFT_DETECTION_MODE_ENABLED == 'true'
      shell: bash
      run: |
        cd "${{ inputs.component-path }}"

        tfcmt \
          --config "${{ github.action_path }}/config/github_issue_description.yaml" \
          -owner "${{ github.repository_owner }}" \
          -repo "${{ github.event.repository.name }}" \
          -var "target:${{ inputs.stack }}-${{ inputs.component }}" \
          -var "component:${{ inputs.component }}" \
          -var "stack:${{ inputs.stack }}" \
          -var "componentPath:${{ inputs.component-path }}" \
          -var "commitSHA:${{ inputs.sha }}" \
          -var "job:${{ github.job }}" \
          -var "logoImage:${{ inputs.branding-logo-image }}" \
          -var "logoUrl:${{ inputs.branding-logo-url }}" \
          -var "infracost_details_diff_breakdown:${{ steps.infracost-diff.outputs.infracost_details_diff_breakdown }}" \
          -var "infracost_total_monthly_cost:${{ steps.infracost-diff.outputs.infracost_diff_total_monthly_cost }}" \
          --output "$GITHUB_WORKSPACE/metadata/issue-description-${{ steps.vars.outputs.component_slug }}.md" \
          --log-level $([[ "${{ inputs.debug }}" == "true" ]] && echo "DEBUG" || echo "INFO") \
          plan -- terraform show ${{ steps.vars.outputs.plan_file }}

    - name: Upload Artifacts
      if: env.DRIFT_DETECTION_MODE_ENABLED == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: metadata
        path: metadata
        retention-days: ${{ inputs.metadata-retention-days }}