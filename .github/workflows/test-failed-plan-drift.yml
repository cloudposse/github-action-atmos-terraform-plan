name: "Test - Failed plan - Drift"

on:
  workflow_dispatch: {}

env:
  AWS_REGION: us-east-2

# Permissions required for assuming AWS identity
permissions:
  id-token: write
  contents: read

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Setup
        run: echo "Do setup"

  test:
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: [setup]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Plan Atmos Component
        id: current
        uses: ./
        with:
          component: "foobar-fail"
          stack: "plat-ue2-sandbox"
          component-path: "components/terraform/foobar"
          terraform-plan-role: ${{ secrets.TERRAFORM_PLAN_ROLE }}
          terraform-state-role: ${{ secrets.TERRAFORM_STATE_ROLE }}
          terraform-state-bucket: ${{ secrets.TERRAFORM_STATE_BUCKET }}
          terraform-state-table: ${{ secrets.TERRAFORM_STATE_TABLE }}
          aws-region: ${{ env.AWS_REGION }}
          sha: da39a3ee5e6b4b0d3255bfef95601890afd80709
          drift-detection-mode-enabled: true

    outputs:
      result: ${{ steps.current.outcome }}
      summary: ${{ steps.current.outputs.summary }}

  assert:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: nick-fields/assert-action@v1
        with:
          expected: 'failure'
          actual: "${{ needs.test.outputs.result }}"

      - name: Download Artifacts
        uses: actions/download-artifact@v3

      - name: Display structure of downloaded files
        id: metadata
        run: |
          set +e
          
          test -d ./metadata
          DIR_EXISTS=$?
          echo "dir_exists=${DIR_EXISTS}" >> $GITHUB_OUTPUT

          test -f ./metadata/plat-ue2-sandbox-foobar-fail.metadata.json
          FILE_EXISTS=$?
          echo "file_exists=${FILE_EXISTS}" >> $GITHUB_OUTPUT

          test -f ./metadata/issue-description-plat-ue2-sandbox-foobar-fail.md
          FILE_EXISTS=$?
          echo "file_md_exists=${FILE_EXISTS}" >> $GITHUB_OUTPUT
          
          echo "file_md=$(cat ./metadata/issue-description-plat-ue2-sandbox-foobar-fail.md | jq -Rs .)" >> $GITHUB_OUTPUT

      - uses: nick-fields/assert-action@v1
        with:
          actual: "${{ steps.metadata.outputs.dir_exists }}"
          expected: "0"

      - uses: nick-fields/assert-action@v1
        with:
          actual: "${{ steps.metadata.outputs.file_exists }}"
          expected: "0"

      - uses: nick-fields/assert-action@v1
        with:
          actual: "${{ steps.metadata.outputs.file_md_exists }}"
          expected: "0"

      - uses: nick-fields/assert-action@v1
        with:
          actual: "${{ fromJSON(needs.test.outputs.summary) }}"
          expected: "${{ fromJSON(steps.metadata.outputs.file_md) }}"

      - uses: nick-fields/assert-action@v1
        with:
          actual: "${{ fromJSON(needs.test.outputs.summary) }}"
          expected: |
            ## :x: Drift Detection Failed for `foobar-fail` in `plat-ue2-sandbox`!
            
            
            
            <a href="https://cloudposse.com/"><img src="https://cloudposse.com/logo-300x69.svg" width="100px" align="right"/></a>
            
            
            
            
            
            
            <details><summary><a id="result-plat-ue2-sandbox-foobar-fail" />:warning: Error summary</summary>
            
            <br/>      
            
            
            ```hcl
            Error: Invalid function argument
            
              on main.tf line 10, in locals:
              10:   failure = var.enable_failure ? file("Failed because failure mode is enabled") : null
                ├────────────────
                │ while calling file(path)
            
            Invalid value for "path" parameter: no file exists at "Failed because failure
            mode is enabled"; this function works only with files that are distributed as
            part of the configuration source code, so if this file will be created by a
            resource in this configuration you must instead obtain this result from an
            attribute of that resource.
            
            Terraform used the selected providers to generate the following execution
            plan. Resource actions are indicated with the following symbols:
              + create
            
            Terraform planned the following actions, but then encountered a problem:
            
              # random_id.foo will be created
              + resource "random_id" "foo" {
                  + b64_std     = (known after apply)
                  + b64_url     = (known after apply)
                  + byte_length = 8
                  + dec         = (known after apply)
                  + hex         = (known after apply)
                  + id          = (known after apply)
                  + keepers     = {
                      + "seed" = "foo-plat-ue2-sandbox-blue"
                    }
                }
            
            Plan: 1 to add, 0 to change, 0 to destroy.
            exit status 1
            ```
            
                
            
                  
            To reproduce this locally, run:<br/><br/>
            
            ```shell
            atmos terraform plan foobar-fail -s plat-ue2-sandbox
            ```
                
            </details>
            
            
                  
            
            
            
            
            <details><summary>Metadata</summary>
            
            ```json
            {
              "component": "foobar-fail",
              "stack": "plat-ue2-sandbox",
              "componentPath": "components/terraform/foobar",
              "commitSHA": "da39a3ee5e6b4b0d3255bfef95601890afd80709"
            }
            ```
            </details>


  teardown:
    runs-on: ubuntu-latest
    needs: [assert]
    if: ${{ always() }}
    steps:
      - name: Tear down
        run: echo "Do Tear down"
