name: "Test - No changes"

on:
  workflow_dispatch: {}

env:
  AWS_REGION: us-east-2

# Permissions required for assuming AWS identity
permissions:
  id-token: write
  contents: read

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Setup
        run: echo "Do setup"

  test:
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: [setup]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - shell: bash
        run: |
          mkdir -p ${{ runner.temp }}
          cat > ${{ runner.temp }}/atmos-gitops.yaml <<EOL
          atmos-version: 1.45.3
          atmos-config-path: ./tests/
          terraform-state-bucket: ${{ secrets.TERRAFORM_STATE_BUCKET }}
          terraform-state-table: ${{ secrets.TERRAFORM_STATE_TABLE }}
          terraform-state-role: ${{ secrets.TERRAFORM_STATE_ROLE }}
          terraform-plan-role: ${{ secrets.TERRAFORM_PLAN_ROLE }}
          terraform-version: 1.5.2
          enable-infracost: false          
          aws-region: ${{ env.AWS_REGION }}
          sort-by: .stack_slug
          group-by: .stack_slug | split("-") | [.[0], .[2]] | join("-")          
          EOL

      - name: Plan Atmos Component
        id: current
        uses: ./
        with:
          component: "foobar"
          stack: "plat-ue2-sandbox"
          sha: da39a3ee5e6b4b0d3255bfef95601890afd80709
          atmos-gitops-config-path: "${{ runner.temp }}/atmos-gitops.yaml"

    outputs:
      result: ${{ steps.current.outcome }}
      summary: ${{ steps.current.outputs.summary }}

  assert:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: nick-fields/assert-action@v1
        with:
          expected: 'success'
          actual: "${{ needs.test.outputs.result }}"

      - name: Download Artifacts
        uses: actions/download-artifact@v3

      - name: Display structure of downloaded files
        id: metadata
        run: |
          set +e
          
          test -d ./metadata
          DIR_EXISTS=$?
          echo "dir_exists=${DIR_EXISTS}" >> $GITHUB_OUTPUT

      - uses: nick-fields/assert-action@v1
        with:
          actual: "${{ steps.metadata.outputs.dir_exists }}"
          expected: "1"

      - uses: nick-fields/assert-action@v1
        with:
          actual: "${{ fromJSON(needs.test.outputs.summary) }}"
          expected: |
            ## Changes Found for `foobar` in `plat-ue2-sandbox`
            
            <a href="https://cloudposse.com/"><img src="https://cloudposse.com/logo-300x69.svg" width="100px" align="right"/></a>
             [![no changes](https://shields.io/badge/-NO_CHANGE-inactive?style=for-the-badge)](#user-content-plat-ue2-sandbox-foobar)
            
            
            
            <details><summary><a id="result-plat-ue2-sandbox-foobar" />Only Outputs will be changed.</summary>
            
            <br/>      
            To reproduce this locally, run:<br/><br/>
            
            ```shell
            atmos terraform plan foobar -s plat-ue2-sandbox
            ```
                
            
            
                
            ---
                
            </details>
            
            <details><summary>Terraform <strong>Plan</strong> Summary</summary>
            
            ```hcl
            Changes to Outputs:
              - result           = "x1aPcbbqXTo" -> null
              - sensitive_value  = (sensitive value) -> null
              - structured_value = {
                  - test  = "test"
                  - value = {
                      - result = "x1aPcbbqXTo"
                    }
                } -> null
            
            You can apply this plan to save these new output values to the Terraform
            state, without changing any real infrastructure.
            ```
            
            </details>

  teardown:
    runs-on: ubuntu-latest
    needs: [assert]
    if: ${{ always() }}
    steps:
      - name: Tear down
        run: echo "Do Tear down"
