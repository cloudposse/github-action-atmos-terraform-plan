---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#

name: github-action-atmos-terraform-plan

tags:
  - github-action
  - atmos
  - terraform

# License of this project
license: "APACHE2"

github_repo: cloudposse/github-action-atmos-terraform-plan

badges:
  - name: "Latest Release"
    image: "https://img.shields.io/github/release/cloudposse/github-action-atmos-terraform-plan.svg"
    url: "https://github.com/cloudposse/github-action-atmos-terraform-plan/releases/latest"
  - name: "Slack Community"
    image: "https://slack.cloudposse.com/badge.svg"
    url: "https://slack.cloudposse.com"

related: []

description: This Github Action is used to run Terraform plan for a single, Atmos-supported component and save the given planfile to S3 and DynamoDB.

introduction: |-
  This Github Action is used to run Terraform plan for a single, Atmos-supported component and save the given planfile to S3 and DynamoDB.

  After running this action, apply Terraform with the companion action, [github-action-atmos-terraform-apply](https://github.com/cloudposse/github-action-atmos-terraform-apply)

references:
  - name: "github-action-atmos-terraform-apply"
    description: "Companion GitHub Action to apply Terraform for a given component"
    url: "https://github.com/cloudposse/github-action-atmos-terraform-apply"
  - name: "github-action-terraform-plan-storage"
    description: "GitHub Action to store Terraform plans"
    url: "https://github.com/cloudposse/github-action-terraform-plan-storage"

usage: |-
  ### Prerequisites

  This GitHub Action requires AWS access for two different purposes. This action will attempt to first run `terraform plan` against a given component and 
  then will use another role to save that given Terraform Plan to an S3 Bucket with metadata in a DynamoDB table. We recommend configuring 
  [OpenID Connect with AWS](https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services) 
  to allow GitHub to assume roles in AWS and then deploying both a Terraform Plan role and a Terraform State role. 
  For Cloud Posse documentation on setting up GitHub OIDC, see our [`github-oidc-provider` component](https://docs.cloudposse.com/components/library/aws/github-oidc-provider/).

  In order to store Terraform State, we configure an S3 Bucket to store plan files and a DynamoDB table to track plan metadata. Both will need to be deployed before running
  this action. For more on setting up those components, see the `gitops` component (__documentation pending__). This action will then use the [github-action-terraform-plan-storage](https://github.com/cloudposse/github-action-terraform-plan-storage) action to update these resources.

  ### Config

  The action expects the atmos gitops configuration file to be present in the repository in `./.github/config/atmos-gitops.yaml`.
  The config should have the following structure:
  
  ```yaml
    atmos-version: 1.45.3
    atmos-config-path: ./rootfs/usr/local/etc/atmos/
    terraform-state-bucket: cptest-core-ue2-auto-gitops
    terraform-state-table: cptest-core-ue2-auto-gitops
    terraform-state-role: arn:aws:iam::xxxxxxxxxxxx:role/cptest-core-ue2-auto-gitops-gha
    terraform-plan-role: arn:aws:iam::yyyyyyyyyyyy:role/cptest-core-gbl-identity-gitops
    terraform-apply-role: arn:aws:iam::yyyyyyyyyyyy:role/cptest-core-gbl-identity-gitops
    terraform-version: 1.5.2
    aws-region: us-east-2
    enable-infracost: false
    sort-by: .stack_slug
    group-by: .stack_slug | split("-") | [.[0], .[2]] | join("-")  
  ```

  [!IMPORTANT]
  >**Please note!** the `terraform-state-*` parameters refer to the S3 Bucket and corresponding meta storage DynamoDB table used to store the Terraform Plan files, and not the "Terraform State". These parameters will be renamed in a subsequent release.  


  ### Workflow example

  ```yaml
    name: "atmos-terraform-plan"

    on:
      workflow_dispatch: {}
      pull_request:
        types:
          - opened
          - synchronize
          - reopened
        branches:
          - main

    # These permissions are required for GitHub to assume roles in AWS
    permissions:
      id-token: write
      contents: read

    jobs:
      plan:
        runs-on: ubuntu-latest
        steps:
          - name: Plan Atmos Component
            uses: cloudposse/github-action-atmos-terraform-plan@v1
            with:
              component: "foobar"
              stack: "plat-ue2-sandbox"
              component-path: "components/terraform/s3-bucket"
              terraform-plan-role: "arn:aws:iam::111111111111:role/acme-core-gbl-identity-gitops"
              terraform-state-bucket: "acme-core-ue2-auto-gitops"
              terraform-state-role: "arn:aws:iam::999999999999:role/acme-core-ue2-auto-gitops-gha"
              terraform-state-table: "acme-core-ue2-auto-gitops"
              aws-region: "us-east-2"

  ```
  
  ### Migrating from `v1` to `v2`
  
  1.  `v2` drops the `component-path` variable and instead fetches if directly from the [`atmos.yaml` file](https://atmos.tools/cli/configuration/) automatically. Simply remove the `component-path` argument from your invocations of the `cloudposse/github-action-atmos-terraform-plan` action.
  2.  `v2` moves most of the `inputs` to the Atmos GitOps config path `./.github/config/atmos-gitops.yaml`. Simply create this file, transfer your settings to it, then remove the corresponding arguments from your invocations of the `cloudposse/github-action-atmos-terraform-plan` action.
  |         name             |
  |--------------------------|
  | `atmos-version`          |
  | `atmos-config-path`      |
  | `terraform-state-bucket` |
  | `terraform-state-table`  |
  | `terraform-state-role`   |
  | `terraform-plan-role`    |
  | `terraform-apply-role`   |
  | `terraform-version`      |
  | `aws-region`             |
  | `enable-infracost`       |
  
  
  If you want the same behavior in `v2` as in `v1` you should create config `./.github/config/atmos-gitops.yaml` with the same variables as in `v1` inputs.
  
  ```yaml
    - name: Plan Atmos Component
      uses: cloudposse/github-action-atmos-terraform-plan@v1
      with:
        component: "foobar"
        stack: "plat-ue2-sandbox"
        atmos-gitops-config-path: ./.github/config/atmos-gitops.yaml
  ```
  
  Which would produce the same behavior as in `v1`, doing this:
  
  ```yaml
    - name: Plan Atmos Component
      uses: cloudposse/github-action-atmos-terraform-plan@v1
      with:
        component: "foobar"
        stack: "plat-ue2-sandbox"
        component-path: "components/terraform/s3-bucket"
        terraform-plan-role: "arn:aws:iam::111111111111:role/acme-core-gbl-identity-gitops"
        terraform-state-bucket: "acme-core-ue2-auto-gitops"
        terraform-state-role: "arn:aws:iam::999999999999:role/acme-core-ue2-auto-gitops-gha"
        terraform-state-table: "acme-core-ue2-auto-gitops"
        aws-region: "us-east-2"
  ```
  

include:
  - "docs/github-action.md"

# Contributors to this project
contributors:
  - name: "Erik Osterman"
    github: "osterman"
  - name: "Daniel Miller"
    github: "milldr"
